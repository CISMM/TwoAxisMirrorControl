/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package cismm;

import java.awt.HeadlessException;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.geom.AffineTransform;
import java.awt.geom.Point2D;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import mmcorej.CMMCore;
import org.micromanager.api.ScriptInterface;
import org.micromanager.utils.ReportingUtils;

/**
 *
 * @author phsiao
 */
public class CalibrationPanel extends DataPanel {

    /**
     * Creates new form CalibrationPanel
     */
    CMMCore core;
    ScriptInterface app;
    Map<String, MainFrame.ExpConfig> config_map;
    MainFrame.ExpConfig cur_config;
    List<String> keys;
    public CalibrationPanel(CMMCore core_,
                            ScriptInterface app_,
                            List<String> keys_,
                            Map<String, MainFrame.ExpConfig> config_map_)
    {
        initComponents();
        core = core_;
        app  = app_;
        keys = keys_;
        config_map = config_map_;
        
        for (String key : keys) {
            config_list.addItem(key);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel7 = new javax.swing.JPanel();
        camera_name_ui = new javax.swing.JComboBox();
        jLabel15 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        x_axis_ui = new javax.swing.JTextField();
        y_axis_ui = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        um_per_pix_ui = new javax.swing.JSpinner();
        jLabel25 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        config_list = new javax.swing.JComboBox();
        calibrate_ui = new javax.swing.JToggleButton();
        reset_daq_ui = new javax.swing.JButton();
        dev_name_ui = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Setup"));

        jLabel15.setText("Camera:");

        jLabel33.setText("X Axis:");

        jLabel34.setText("Y Axis:");

        x_axis_ui.setText("Dev1/ao2");

        y_axis_ui.setText("Dev1/ao3");

        jLabel23.setText("Pixel Size:");

        um_per_pix_ui.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(5.5d), Double.valueOf(0.0d), null, Double.valueOf(0.1d)));

        jLabel25.setText("um");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(camera_name_ui, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel33)
                        .addGap(18, 18, 18)
                        .addComponent(x_axis_ui, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel23)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(um_per_pix_ui, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel25)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel34)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(y_axis_ui, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(camera_name_ui, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15)
                    .addComponent(jLabel23)
                    .addComponent(um_per_pix_ui, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel25))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel33)
                    .addComponent(x_axis_ui, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel34)
                    .addComponent(y_axis_ui, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel35.setText("Calibration for");

        calibrate_ui.setText("Calibrate Now!");
        calibrate_ui.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calibrate_uiActionPerformed(evt);
            }
        });

        reset_daq_ui.setText("Reset DAQ");
        reset_daq_ui.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reset_daq_uiActionPerformed(evt);
            }
        });

        dev_name_ui.setText("Dev1");

        jLabel27.setText("on");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel35)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(config_list, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(reset_daq_ui)
                        .addGap(10, 10, 10)
                        .addComponent(jLabel27)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(dev_name_ui, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(calibrate_ui))
                .addContainerGap(60, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(config_list, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel35))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(calibrate_ui)
                .addGap(66, 66, 66)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(reset_daq_ui)
                    .addComponent(jLabel27)
                    .addComponent(dev_name_ui, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    public void stop_calibration()
    {
        //Util.is_stop_requested.set(true);
        //is_daq_running.set(false);
        NI.force_stop_daq();
    }

    public void run_calibration() 
    {
        
        final boolean liveModeRunning = app.isLiveModeOn();
        app.enableLiveMode(false);

        cur_config = config_map.get(config_list.getSelectedItem().toString());
        

        if (camera_name_ui.getItemCount() == 0) {
            JOptionPane.showMessageDialog(null,
                    "No camera found. Require a camera to detect signals.");
            return;
        }
        if (x_axis_ui.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null,
                    "Need to specify x-axis signal");
            return;
        }
        if (y_axis_ui.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null,
                    "Need to specify y-axis signal");
            return;
        }
        if ((Double) um_per_pix_ui.getValue() == 0) {
            JOptionPane.showMessageDialog(null,
                    "Need to specify pixel size");
            return;
        }

        // populate properties in cur_mode from GUI
        cur_config.mode_name = config_list.getSelectedItem().toString();
        cur_config.camera_name = camera_name_ui.getSelectedItem().toString();
        cur_config.daq_dev_str = x_axis_ui.getText() + "," + y_axis_ui.getText();
        cur_config.um_per_pix = (Double) um_per_pix_ui.getValue();

        Point2D.Double zero_v = new Point2D.Double(0, 0);
        Point zero_p = Util.measureSpotOnCamera(core, app, cur_config.daq_dev_str, zero_v);
        cur_config.center_x = zero_p.x;
        cur_config.center_y = zero_p.y;

        Thread calibrate_thread = new Thread("Calibration thread") {
            @Override
            public void run() {
                try {                   
                    AffineTransform first_mapping = Util.generateLinearMapping(core, app, cur_config.daq_dev_str);
                    HashMap<Polygon, AffineTransform> poly_mapping = 
                            (HashMap<Polygon, AffineTransform>) Util.generateNonlinearMapping(
                            core,
                            app,
                            cur_config.daq_dev_str,
                            cur_config.first_mapping);
                    
                    boolean is_cancelled = (first_mapping == null) ||
                                           (poly_mapping  == null);
                    
                    if (!is_cancelled) {
                        cur_config.first_mapping = first_mapping;
                        cur_config.poly_mapping = poly_mapping;
                        MainFrame.save_calibration_to_disk(cur_config);
                        //mark_calibration_label(cur_config.mode_name);
                        
//                        if (cur_config.mode_name.equals(mode_str_array.get(0))) {
//                            original_center_x_ui.setText(Integer.toString(cur_config.center_x));
//                            original_center_y_ui.setText(Integer.toString(cur_mode.center_y));
//                            center_input_x_ui.setValue(Integer.valueOf(cur_mode.center_x));
//                            center_input_y_ui.setValue(Integer.valueOf(cur_mode.center_y));
//                        }
                    }

                    app.enableLiveMode(liveModeRunning);
                    JOptionPane.showMessageDialog(null,
                            "Calibration " + (is_cancelled ?  
                            "canceled." : "finished."));
                    
                             
                } catch (HeadlessException e) {
                    ReportingUtils.showError(e);
                } catch (RuntimeException e) {
                    ReportingUtils.showError(e);          
                } finally {
                    Util.is_stop_requested.set(false);
                }
            }
        };
        calibrate_thread.start();
    }
    private void calibrate_uiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calibrate_uiActionPerformed

        boolean daq_running = NI.is_daq_running();
        boolean calibrate_pressed = calibrate_ui.isSelected();

        if (daq_running && calibrate_pressed) {
            JOptionPane.showMessageDialog(null,
                "The DAQ boad is being used by other program.");
            calibrate_ui.setSelected(false);
        } else if (daq_running && !calibrate_pressed) {
            stop_calibration();
            calibrate_ui.setText("Calibrate Now!");
        } else if (!daq_running && calibrate_pressed) {
            run_calibration();
            calibrate_ui.setText("Stop Calibration");
        } else {}
    }//GEN-LAST:event_calibrate_uiActionPerformed

    private void reset_daq(String dev_str) {
        
        try {
            String app = System.getProperty("user.dir")
                    + File.separator + "mmplugins" + File.separator
                    + "reset_daq.exe";

            ProcessBuilder pb = new ProcessBuilder(app, dev_str);
            NI.daq_proc = pb.start();
            NI.daq_proc.waitFor();
            NI.daq_proc.destroy();
            
        } catch (IOException ex) {
            Logger.getLogger(MirrorControlForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(MirrorControlForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    
    }
    private void reset_daq_uiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reset_daq_uiActionPerformed

        // Get the device name from current mode
        String dev_name = dev_name_ui.getText();
        reset_daq(dev_name);
        
        /*
        // TODO Find a way to loop through all modes without hard-coded index
        Point2D.Double zero_v = new Point2D.Double(0, 0);
        //cur_mode = mode_map.get(mode_str_array.get(1));
        //displaySpot(0, 0);
        //cur_mode = mode_map.get(mode_str_array.get(0));
        final boolean liveModeRunning = app_.isLiveModeOn();
        app_.enableLiveMode(false);
        Point p = measureSpotOnCamera(zero_v, false);

        zero_v_x = p.x;
        zero_v_y = p.y;

        app_.enableLiveMode(liveModeRunning);
        */
    }//GEN-LAST:event_reset_daq_uiActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton calibrate_ui;
    private javax.swing.JComboBox camera_name_ui;
    private javax.swing.JComboBox config_list;
    private javax.swing.JTextField dev_name_ui;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JButton reset_daq_ui;
    private javax.swing.JSpinner um_per_pix_ui;
    private javax.swing.JTextField x_axis_ui;
    private javax.swing.JTextField y_axis_ui;
    // End of variables declaration//GEN-END:variables
}

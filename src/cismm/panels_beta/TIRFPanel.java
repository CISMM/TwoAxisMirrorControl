/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package cismm;

//import static cismm.MirrorControlForm.is_daq_running;
import ij.ImagePlus;
import ij.io.FileSaver;
import ij.process.ImageProcessor;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.geom.Point2D;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import mmcorej.CMMCore;
import mmcorej.TaggedImage;
import org.micromanager.api.ScriptInterface;
import org.micromanager.utils.ImageUtils;

/**
 *
 * @author phsiao
 */
public class TIRFPanel extends DataPanel {
    
    public static class TIRFCircle implements Serializable {
        
        List<String> volts = null;
        int radius_um = 0;
        double circle_frequency = 0;
        int center_x = -1;
        int center_y = -1;
        
        @Override
        public String toString() {
            return Integer.toString(radius_um) + "um, " +
                   Double.toString(circle_frequency) + "Hz";
        }  
    }
    
    private ScriptInterface app;
    private CMMCore core;
    
    //private List<String> daq_bin_list_;
    
    
    DefaultListModel tirf_loops_model = new DefaultListModel();
    
    public TIRFPanel(CMMCore core_, ScriptInterface app_) {
        initComponents();
        
        core = core_;
        app  = app_;
        
        ((JSpinner.DefaultEditor)input_volt_x_ui.getEditor()).getTextField().addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e){
                if (e.getKeyCode() == KeyEvent.VK_ENTER){
                    Util.set_voltage(config.daq_dev_str,
                            (Double)input_volt_x_ui.getValue(),
                            (Double)input_volt_y_ui.getValue());
                }
            }
        });
        
        ((JSpinner.DefaultEditor)input_volt_y_ui.getEditor()).getTextField().addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e){
                if (e.getKeyCode() == KeyEvent.VK_ENTER){
                    Util.set_voltage(config.daq_dev_str,
                            (Double)input_volt_x_ui.getValue(),
                            (Double)input_volt_y_ui.getValue());
                }
            }
        });
        
        tirf_loops_ui.setModel(tirf_loops_model);
        
        if (config != null) {
            original_center_x_ui.setText(String.valueOf(config.center_x));
            original_center_y_ui.setText(String.valueOf(config.center_y));
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        circle_radius_ui = new javax.swing.JSpinner();
        circle_samples_ui = new javax.swing.JSpinner();
        circle_frequency_ui = new javax.swing.JSpinner();
        jLabel22 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        original_center_x_ui = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        original_center_y_ui = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        center_input_x_ui = new javax.swing.JSpinner();
        jLabel32 = new javax.swing.JLabel();
        center_input_y_ui = new javax.swing.JSpinner();
        freerun_ui = new javax.swing.JToggleButton();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tirf_loops_ui = new javax.swing.JList();
        remove_circle_ui = new javax.swing.JButton();
        move_circle_up_ui = new javax.swing.JButton();
        move_circle_down_ui = new javax.swing.JButton();
        submit_circles_ui = new javax.swing.JToggleButton();
        save_circle_maps_ui = new javax.swing.JButton();
        camera_name_ui1 = new javax.swing.JComboBox();
        add_circle_ui = new javax.swing.JButton();
        input_volt_x_ui = new javax.swing.JSpinner();
        jLabel17 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        input_volt_y_ui = new javax.swing.JSpinner();
        jLabel24 = new javax.swing.JLabel();

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("New Circle"));

        jLabel26.setText("Radius (um):");

        jLabel28.setText("# of samples:");

        jLabel21.setText("Circle Frequency:");

        circle_radius_ui.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(4200), Integer.valueOf(0), null, Integer.valueOf(1)));

        circle_samples_ui.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(200), Integer.valueOf(0), null, Integer.valueOf(1)));

        circle_frequency_ui.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(30.0d), Double.valueOf(0.1d), null, Double.valueOf(1.0d)));

        jLabel22.setText("Hz");

        jLabel18.setText("Detected Center:");

        original_center_x_ui.setText("-1");

        jLabel29.setText(",");

        original_center_y_ui.setText("-1");

        jLabel31.setText("CenterX:");

        center_input_x_ui.setModel(new javax.swing.SpinnerNumberModel());

        jLabel32.setText("CenterY:");

        center_input_y_ui.setModel(new javax.swing.SpinnerNumberModel());

        freerun_ui.setText("Free Run");
        freerun_ui.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                freerun_uiActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel28)
                                    .addComponent(jLabel26)
                                    .addComponent(jLabel18))
                                .addGap(5, 5, 5)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addComponent(original_center_x_ui)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(original_center_y_ui))
                                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(circle_samples_ui, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(circle_radius_ui, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE))))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel31)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(center_input_x_ui, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel32)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(center_input_y_ui, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel21)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(circle_frequency_ui, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel22)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(freerun_ui, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(original_center_x_ui)
                    .addComponent(jLabel29)
                    .addComponent(original_center_y_ui))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel31)
                    .addComponent(center_input_x_ui, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel32)
                    .addComponent(center_input_y_ui, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26)
                    .addComponent(circle_radius_ui, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel28)
                    .addComponent(circle_samples_ui, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(circle_frequency_ui, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22)
                    .addComponent(freerun_ui))
                .addGap(27, 27, 27))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Circle Loops (radius in um)"));

        jScrollPane1.setViewportView(tirf_loops_ui);

        remove_circle_ui.setText("Remove");
        remove_circle_ui.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remove_circle_uiActionPerformed(evt);
            }
        });

        move_circle_up_ui.setText("Move Up");
        move_circle_up_ui.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                move_circle_up_uiActionPerformed(evt);
            }
        });

        move_circle_down_ui.setText("Move Down");
        move_circle_down_ui.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                move_circle_down_uiActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(remove_circle_ui, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(move_circle_up_ui, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(move_circle_down_ui))
                .addGap(6, 6, 6))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(remove_circle_ui)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(move_circle_up_ui)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(move_circle_down_ui)))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        submit_circles_ui.setText("Submit Circles");
        submit_circles_ui.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submit_circles_uiActionPerformed(evt);
            }
        });

        save_circle_maps_ui.setText("Save circle maps");
        save_circle_maps_ui.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                save_circle_maps_uiActionPerformed(evt);
            }
        });

        add_circle_ui.setText("Add Circle to Loop");
        add_circle_ui.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add_circle_uiActionPerformed(evt);
            }
        });

        input_volt_x_ui.setModel(new javax.swing.SpinnerNumberModel(0.0d, -10.0d, 10.0d, 0.01d));

        jLabel17.setText("X:");

        jLabel19.setText("Y:");

        input_volt_y_ui.setModel(new javax.swing.SpinnerNumberModel(0.0d, -10.0d, 10.0d, 0.01d));

        jLabel24.setText("(-10 to 10) volt");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(input_volt_x_ui, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(input_volt_y_ui, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel24)
                        .addGap(122, 122, 122)
                        .addComponent(camera_name_ui1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(save_circle_maps_ui))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(add_circle_ui)
                            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(130, 130, 130)
                                .addComponent(submit_circles_ui)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(submit_circles_ui)
                    .addComponent(add_circle_ui))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel19)
                            .addComponent(jLabel24)
                            .addComponent(jLabel17)
                            .addComponent(input_volt_x_ui, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(input_volt_y_ui, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(save_circle_maps_ui)
                            .addComponent(camera_name_ui1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(58, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    
    public void set_config(MainFrame.ExpConfig conf) {
        config = conf;
    }
    
    private boolean is_calibration_performed() {
        if (config == null || config.poly_mapping == null) {
            JOptionPane.showMessageDialog(null, "No Calibration Data");
            return false;
        }
        return true;
    }
    
    private List<Double> create_circle_dots(int center_x, int center_y) {
        /*
        if (!is_calibration_performed()) {
            return null;
        }
        */
        List<Double> ret = new ArrayList<Double>();

        int num_dots = (Integer)circle_samples_ui.getValue();
        double radius = ((Integer)circle_radius_ui.getValue()).doubleValue() /
                     config.um_per_pix;

        double unit_angle = (360.0 / num_dots) * (Math.PI / 180.0);

        for (int i = 0; i < num_dots; i++) {
            double dot_x = Math.cos(unit_angle * i) * radius + center_x;
            double dot_y = Math.sin(unit_angle * i) * radius + center_y;

            //ret.add(dot_x);
            //ret.add(dot_y);
            ret.add((double)i);
            ret.add((double)i);

        }
        //System.out.print(ret.toString());
        return ret;
    }
    private void stop_freerun() {
        NI.force_stop_daq();
    }
    
    private void start_freerun() {
        //is_daq_running.set(true);
        
        if (!is_calibration_performed()) {
            return;
        }
        
        final List<Double> combined = create_circle_dots((Integer) center_input_x_ui.getValue(),
                (Integer) center_input_y_ui.getValue());
        
        final List<String> transformed_points = new ArrayList<String>();

        for (int i = 0; i < combined.size() - 1; i += 2) {
            Point2D.Double p = new Point2D.Double(combined.get(i), combined.get(i + 1));
            Point2D.Double trans_p = Util.transformPoint(config.poly_mapping, p);

            transformed_points.add(String.valueOf(trans_p.x));
            transformed_points.add(String.valueOf(trans_p.y));
            
            //transformed_points.add(String.valueOf(i));
            //transformed_points.add(String.valueOf(i+1));
        }

        int sampling_rate = (int) ((Integer) circle_samples_ui.getValue()
                * (Double) circle_frequency_ui.getValue());


        // example: run dev1/ao0,dev1/ao1 rate 6 x1 y1 x2 y2 x3 y3
        
//        List<String> args = Arrays.asList("dev1/ao2,dev1/ao3",
//                Integer.toString(sampling_rate),
//                Integer.toString(transformed_points.size()));
                
        List<String> args = Arrays.asList(config.daq_dev_str,
                Integer.toString(sampling_rate),
                Integer.toString(transformed_points.size()));

        transformed_points.addAll(0, args);

        Thread th = new Thread("Freerun thread") {
            @Override
            public void run() {     
                    NI.run_daq_program(Util.jar_path() + "freerun.exe",
                            transformed_points);
            }
        };
        th.start();
    }
    
    private void freerun_uiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_freerun_uiActionPerformed

        if (!is_calibration_performed())
        return;

        boolean daq_running = NI.is_daq_running();
        boolean freerun_pressed = freerun_ui.isSelected();

        if (daq_running && freerun_pressed) {
            JOptionPane.showMessageDialog(null,
                "The DAQ boad is being used by other program.");
            freerun_ui.setSelected(false);
        } else if (daq_running && !freerun_pressed) {
            stop_freerun();
            freerun_ui.setText("Free Run");
        } else if (!daq_running && freerun_pressed) {
            start_freerun();
            freerun_ui.setText("Cancel");
        } else {}
    }//GEN-LAST:event_freerun_uiActionPerformed

    private void remove_circle_uiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remove_circle_uiActionPerformed
        int selected = tirf_loops_ui.getSelectedIndex();
        if (selected == -1)
        return;
        tirf_loops_model.remove(selected);
    }//GEN-LAST:event_remove_circle_uiActionPerformed

    private void move_circle_up_uiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_move_circle_up_uiActionPerformed
        int selected = tirf_loops_ui.getSelectedIndex();
        if (selected == -1 || selected == 0)
        return;
        Object selected_item = (TIRFCircle) tirf_loops_model.get(selected);
        Object pre_item = (TIRFCircle) tirf_loops_model.get(selected-1);

        tirf_loops_model.set(selected, pre_item);
        tirf_loops_model.set(selected-1, selected_item);

        tirf_loops_ui.setSelectedIndex(selected-1);
    }//GEN-LAST:event_move_circle_up_uiActionPerformed

    private void move_circle_down_uiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_move_circle_down_uiActionPerformed
        int selected = tirf_loops_ui.getSelectedIndex();
        if (selected == -1 || selected == tirf_loops_model.size()-1)
        return;
        Object selected_item = (TIRFCircle) tirf_loops_model.get(selected);
        Object next_item = (TIRFCircle) tirf_loops_model.get(selected+1);

        tirf_loops_model.set(selected, next_item);
        tirf_loops_model.set(selected+1, selected_item);

        tirf_loops_ui.setSelectedIndex(selected+1);
    }//GEN-LAST:event_move_circle_down_uiActionPerformed
    private void stop_submit_circles() {
        NI.force_stop_daq();
    }
    
    private void start_submit_circles() {

        //is_daq_running.set(true);
        // prepare arguments before calling an external program
        final List<String> args = new ArrayList<String>();

        
        //args.add(config.daq_dev_str);
        args.add("Dev1/ao2,Dev1/ao3");
        args.add("/Dev1/PFI0");
        args.add("2");
        Double sampling_rate = ((TIRFCircle)(tirf_loops_model.get(0))).circle_frequency
                * ((TIRFCircle)(tirf_loops_model.get(0))).volts.size() / 2;
        
        args.add(Integer.toString(sampling_rate.intValue()));
        args.add(Integer.toString(tirf_loops_model.size()));
        args.add(Integer.toString(((TIRFCircle)(tirf_loops_model.get(0))).volts.size() / 2));

        for (int i=0; i < tirf_loops_model.size(); ++i) {
                    args.addAll(((TIRFCircle)(tirf_loops_model.get(i))).volts);
        }
        
        for (String s: args){
            System.out.println(s);
        }
        
        Thread th = new Thread("Submit circles thread") {
            @Override
            public void run() {
                NI.run_daq_program(Util.jar_path() + "ao_patterns_triggered.exe", 
                        args);
            }
        };
        th.start();
    }
    
    private void submit_circles_uiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submit_circles_uiActionPerformed

        //if (!is_calibration_performed())
        //return;

        boolean daq_running = NI.is_daq_running();
        boolean submit_pressed = submit_circles_ui.isSelected();

        if (daq_running && submit_pressed) {
            JOptionPane.showMessageDialog(null,
                "The DAQ boad is being used by other program.");
            submit_circles_ui.setSelected(false);
        } else if (daq_running && !submit_pressed) {
            stop_submit_circles();
            submit_circles_ui.setText("Submit Circles");
        } else if (!daq_running && submit_pressed) {
            start_submit_circles();
            submit_circles_ui.setText("Cancel");
        } else {}
    }//GEN-LAST:event_submit_circles_uiActionPerformed

    private void save_circle_maps_uiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_save_circle_maps_uiActionPerformed

        Thread th = new Thread("Projector calibration thread") {
            @Override
            public void run() {
                final boolean liveModeRunning = app.isLiveModeOn();
                app.enableLiveMode(false);

                String old_cam = core.getCameraDevice();
                try {
                    core.setCameraDevice(camera_name_ui1.getSelectedItem().toString());
                } catch (Exception ex) {
                    Logger.getLogger(TIRFPanel.class.getName()).log(Level.SEVERE, null, ex);
                }

                final List<String> all_volts = new ArrayList<String>();
                for (int i=0; i < tirf_loops_model.size(); ++i) {
                    all_volts.addAll(((TIRFCircle)(tirf_loops_model.get(i))).volts);
                }

                short max_image[] = null;

                try {
                    core.snapImage();
                    TaggedImage timg = core.getTaggedImage();
                    max_image = (short[]) timg.pix;
                } catch (Exception ex) {
                    Logger.getLogger(TIRFPanel.class.getName()).log(Level.SEVERE, null, ex);
                }

                // Compare to max_image and save the maximum value for each pixel
                String prefix = "tirf_map_";
                for (int i = 0, cnt = 0; i < all_volts.size(); i += 2, cnt++) {
                    Util.set_voltage(config.daq_dev_str,
                        Double.valueOf(all_volts.get(i)),
                        Double.valueOf(all_volts.get(i + 1)));
                    try {
                        core.snapImage();
                        TaggedImage timg = core.getTaggedImage();
                        app.displayImage(timg);

                        //short image[] = (short[]) core_.getImage();
                        short image[] = (short[]) timg.pix;

                        ImageProcessor ip = ImageUtils.makeProcessor(core, image);
                        ImagePlus imgp = new ImagePlus("", ip);
                        FileSaver fs = new FileSaver(imgp);
                        fs.saveAsTiff(".\\"+prefix+String.format("%04d", cnt)+".tiff");
                            /*
                            for (int q = 0; q < image.length; q++) {
                                if (image[q] > max_image[q]) {
                                    max_image[q] = image[q];
                                }
                            }
                            */
                        } catch (Exception ex) {
                            Logger.getLogger(TIRFPanel.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }

                    JOptionPane.showMessageDialog(null
                        , "Supercomposed image has been saved.");
                    app.enableLiveMode(liveModeRunning);

                    try {
                        core.setCameraDevice(old_cam);
                    } catch (Exception ex) {
                        Logger.getLogger(TIRFPanel.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            };
            th.start();
    }//GEN-LAST:event_save_circle_maps_uiActionPerformed

    private void add_circle_uiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_circle_uiActionPerformed
        /*
        if (!is_calibration_performed()) {
            return;
        }
        */
        TIRFCircle tc = new TIRFCircle();

        List<Double> circle_px = create_circle_dots((Integer)center_input_x_ui.getValue(),
            (Integer)center_input_y_ui.getValue());
        if (circle_px == null)
            return;

        List<String> transformed_points = new ArrayList<String>();
        for (int i = 0; i < circle_px.size() - 1; i += 2) {
            Point2D.Double p = new Point2D.Double(circle_px.get(i), circle_px.get(i + 1));
            transformed_points.add(String.valueOf(p.x));
            transformed_points.add(String.valueOf(p.y));
            
            //Point2D.Double trans_p = Util.transformPoint(config.poly_mapping, p);
            //transformed_points.add(String.valueOf(trans_p.x));
            //transformed_points.add(String.valueOf(trans_p.y));

            //String x = String.format("%.1f", (Double)trans_p.x);
            //String y = String.format("%.1f", (Double)trans_p.y);
        }

        tc.volts = transformed_points;
        tc.radius_um = (Integer)circle_radius_ui.getValue();
        tc.circle_frequency = (Double)circle_frequency_ui.getValue();
        tc.center_x = (Integer)center_input_x_ui.getValue();
        tc.center_y = (Integer)center_input_y_ui.getValue();

        tirf_loops_model.addElement(tc);
    }//GEN-LAST:event_add_circle_uiActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add_circle_ui;
    private javax.swing.JComboBox camera_name_ui1;
    private javax.swing.JSpinner center_input_x_ui;
    private javax.swing.JSpinner center_input_y_ui;
    private javax.swing.JSpinner circle_frequency_ui;
    private javax.swing.JSpinner circle_radius_ui;
    private javax.swing.JSpinner circle_samples_ui;
    private javax.swing.JToggleButton freerun_ui;
    private javax.swing.JSpinner input_volt_x_ui;
    private javax.swing.JSpinner input_volt_y_ui;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton move_circle_down_ui;
    private javax.swing.JButton move_circle_up_ui;
    private javax.swing.JLabel original_center_x_ui;
    private javax.swing.JLabel original_center_y_ui;
    private javax.swing.JButton remove_circle_ui;
    private javax.swing.JButton save_circle_maps_ui;
    private javax.swing.JToggleButton submit_circles_ui;
    private javax.swing.JList tirf_loops_ui;
    // End of variables declaration//GEN-END:variables
}

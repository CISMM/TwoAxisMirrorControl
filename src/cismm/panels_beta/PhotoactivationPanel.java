/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package cismm;

import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import mmcorej.CMMCore;
import mmcorej.StrVector;
import org.micromanager.api.ScriptInterface;

/**
 *
 * @author phsiao
 */
public class PhotoactivationPanel extends DataPanel {

    /**
     * Creates new form PhotoactivationPanel
     */
    public PhotoactivationPanel(CMMCore core_, ScriptInterface app_) {
        initComponents();
        core = core_;
        app  = app_;
    }
    
    private ScriptInterface app;
    private CMMCore core;
    List<String> device_list = new ArrayList<String>();
    List<String> property_list = new ArrayList<String>();
    List<String> normal_value_list = new ArrayList<String>();
    List<String> bleach_value_list = new ArrayList<String>();
    List<Integer>    switch_point_list = new ArrayList<Integer>();
    boolean cur_state = false;
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel36 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        pa_table = new javax.swing.JTable();
        add_pa_row_ui = new javax.swing.JButton();
        remove_pa_row_ui = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        property_table = new javax.swing.JTable();
        start_pa_ui = new javax.swing.JButton();
        add_property_ui = new javax.swing.JButton();
        remove_property_ui = new javax.swing.JButton();
        interval_ui = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        interval_unit_ui = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        frame_number_ui = new javax.swing.JSpinner();

        jLabel36.setText("Photoactivation channel timing (one position at a time)");

        pa_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "start frame", "end frame", "x position", "y position"
            }
        ));
        jScrollPane3.setViewportView(pa_table);

        add_pa_row_ui.setText("Add");
        add_pa_row_ui.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add_pa_row_uiActionPerformed(evt);
            }
        });

        remove_pa_row_ui.setText("Remove");
        remove_pa_row_ui.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remove_pa_row_uiActionPerformed(evt);
            }
        });

        property_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "property", "plain channel", "photoactivation channel"
            }
        ));
        jScrollPane4.setViewportView(property_table);

        start_pa_ui.setText("Start now");
        start_pa_ui.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                start_pa_uiActionPerformed(evt);
            }
        });

        add_property_ui.setText("Add");
        add_property_ui.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add_property_uiActionPerformed(evt);
            }
        });

        remove_property_ui.setText("Remove");

        jLabel1.setText("Interval:");

        interval_unit_ui.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ms", "s", "min" }));

        jLabel2.setText("# of Frames:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 399, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(add_pa_row_ui, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(remove_pa_row_ui, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel36)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(frame_number_ui, javax.swing.GroupLayout.DEFAULT_SIZE, 79, Short.MAX_VALUE)
                                    .addComponent(interval_ui))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(interval_unit_ui, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(add_property_ui, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(remove_property_ui, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(start_pa_ui, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(frame_number_ui, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(interval_ui, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(interval_unit_ui, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel36)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(add_pa_row_ui)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(remove_pa_row_ui)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(add_property_ui)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(remove_property_ui)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(start_pa_ui)
                .addContainerGap(55, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    private void switch_to_normal() {
        for (int i=0; i < device_list.size(); i++) {
            try {
                core.setProperty(device_list.get(i),
                                 property_list.get(i),
                                 normal_value_list.get(i));
            } catch (Exception ex) {
                Logger.getLogger(PhotoactivationPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    private void switch_to_bleaching() {
        for (int i=0; i < device_list.size(); i++) {
            try {
                core.setProperty(device_list.get(i),
                                 property_list.get(i),
                                 bleach_value_list.get(i));
            } catch (Exception ex) {
                Logger.getLogger(PhotoactivationPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    private void set_properties_and_switch_state() {
        if (cur_state == false) {
            switch_to_normal();
        } else {
            switch_to_bleaching();
        }
        
        cur_state = !cur_state;
    }
    private void add_pa_row_uiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_pa_row_uiActionPerformed
        DefaultTableModel model = (DefaultTableModel) pa_table.getModel();
        model.addRow(new Object[]{"0", "0", "0", "0"});
    }//GEN-LAST:event_add_pa_row_uiActionPerformed

    private void remove_pa_row_uiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remove_pa_row_uiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_remove_pa_row_uiActionPerformed

    private void start_pa_uiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_start_pa_uiActionPerformed
        // Store propertiy values for normal mode and bleaching mode into
        // separate arrays.
        DefaultTableModel model = (DefaultTableModel)property_table.getModel();
        for (int row = 0; row < model.getRowCount(); row++) {
            String delim = "[-]";
            String[] tokens = ((String) (model.getValueAt(row, 0))).split(delim);
            
            String dev = tokens[0];
            String prop = tokens[1];
            String normal_value = (String)model.getValueAt(row, 1);
            String bleach_value = (String)model.getValueAt(row, 2);
            
            device_list.add(dev);
            property_list.add(prop);
            normal_value_list.add(normal_value);
            bleach_value_list.add(bleach_value);        
        }

        //int num_of_frames = Integer.parseInt(frame_number_ui.toString());
        int num_of_frames = 10;
        int interval_ms   = 1000;
        
        switch_point_list.add(3);
        switch_point_list.add(6);
        
        int switch_point_ind = 0;
        set_properties_and_switch_state();
        for (int i=0; i<num_of_frames; i++) {           
            if (i == switch_point_list.get(switch_point_ind)) {
                set_properties_and_switch_state();
                switch_point_ind++;
            }
            try {
                core.snapImage();
            } catch (Exception ex) {
                Logger.getLogger(PhotoactivationPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_start_pa_uiActionPerformed

    private void add_property_uiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_property_uiActionPerformed
        DefaultTableModel model = (DefaultTableModel) property_table.getModel();
        model.addRow(new Object[]{"pick a property", "", ""});

        JComboBox property_combo = new JComboBox();
        JComboBox property_value_combo_no_pa = new JComboBox();
        JComboBox property_value_combo_pa = new JComboBox();

        ArrayList<String> dev_prop_list = new ArrayList<String>();
        StrVector devices = core.getLoadedDevices();
        for (int i =0; i < devices.size(); i++) {
            try {
                StrVector dev_prop = core.getDevicePropertyNames(devices.get(i));
                for (int j=0; j <dev_prop.size(); j++) {
                    String combination = devices.get(i) + "-" + dev_prop.get(j);
                    dev_prop_list.add(combination);
                }

            } catch (Exception ex) {
                Logger.getLogger(MirrorControlForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        property_combo.setModel(new DefaultComboBoxModel(dev_prop_list.toArray()));

        TableColumn property_column = property_table.getColumnModel().getColumn(0);
        property_column.setCellEditor(new DefaultCellEditor(property_combo));
    }//GEN-LAST:event_add_property_uiActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add_pa_row_ui;
    private javax.swing.JButton add_property_ui;
    private javax.swing.JSpinner frame_number_ui;
    private javax.swing.JSpinner interval_ui;
    private javax.swing.JComboBox interval_unit_ui;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable pa_table;
    private javax.swing.JTable property_table;
    private javax.swing.JButton remove_pa_row_ui;
    private javax.swing.JButton remove_property_ui;
    private javax.swing.JButton start_pa_ui;
    // End of variables declaration//GEN-END:variables
}
